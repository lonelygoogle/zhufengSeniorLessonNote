// let result = 100 + true + 21.2 + null + undefined + "Tencent" + [] + null + 9 + false;
// console.log(result); //“NaNTencentnull9false”
/*
 * A+B
 *   两边中的任何一边遇到字符串或者对象(对象转换为数字要先转换为字符串[排除有原始值的]),都是按照字符串拼接处理的
 *      {}+10 => 10  左边的大括号当作一个代码块，不参与运算
 *      ({}+10) => "[object Object]10"
 *      10+{} => "10[object Object]"
 * +A/++A/A++
 *   都是转换为数字
 */
// let n = "10";
// console.log(+n + 20);

//==========
// parseInt([value])：把一个字符串转换为数字（[value]不是字符串，也要先转换为字符串），处理机制：从字符串左侧第一个字符开始查找，把找到有效数字字符转换为数字，直到遇到一个非有效数字字符，则停止查找（不论后面是否还有数字字符，都不再查找了）
// parseInt([value],[radix])
//   + [radix]不写(或者写0)，默认是10进制；特殊情况，如果[value]是以0x开头的字符串，则[radix]不写默认是16进制；
//   + [radix]有自己的取值范围 2~36 之间，不再这个之间的，返回结果都是NaN
//   + 首先会在[value]字符串中，从左到右找到所有符合[radix]进制的值（遇到一个非[radix]进制的值则停止查找），把找到的结果最后转换为10进制的值
//------
// 把一个N进制的值转换为10进制
// 例如：把一个8进制的值转换为10进制
// let n = "1042"; //8进制
// 2*8^0 + 4*8^1 + 0*8^2 + 1*8^3
// 2 + 32 + 0 + 512 = 546
//-----
// arr=arr.map(function(item,index){
//     没迭代数组中的一项，都会把这个回调函数触发执行，并且把当前迭代这一项和这一项的索引传递给这个函数
//     回调函数的返回值会把数组这一项替换调，原始数组不变，返回一个新数组
// });
/* let arr = [27.2, 0, '0013', '14px', 123];
arr = arr.map(parseInt);
// parseInt('27.2',0) =>27
// parseInt('0',1) =>NaN
// parseInt('0013',2) =>'001'看作2进制最后转换为10进制  0*2^2+0*2^1+1*2^0 => 1
// parseInt('14px',3) =>'1'看作3进制转换为10进制 1*3^0 => 1
// parseInt('123',4) =>'123'看作4进制转换为10进制 1*4^2+2*4^1+3*4^0 = 16+8+3 => 27
console.log(arr); */